@model UserCollections.ViewModels.ItemViewModel
@{
    ViewBag.Title = "Список пользователей";
}
<div class="row justify-content-center">
    <div class="modal-body auth-form m-3">
        <div class="row mb-3 justify-content-around align-items-center p-3">
            <div class="col-sm-3">
                <h3 class="text-center">@Model.Item.Name</h3>
            </div>
            <div class="col-sm-4 m-3 justify-content-center align-items-center">
                <div style="line-height:300%;">
                    @for (int j = 0; j < Model.Item.Tags.Count; j++)
                    {
                    <span class="tag">@Model.Item.Tags[j].Text</span>
                    }
                </div>
            </div>
            @if (ViewBag.Status < 3)
            {
            <div class="col-sm-3">
                @if (Model.Item.Likes.FirstOrDefault(l => l.UserName == ViewBag.Name) != null)
                    {
                <button class="btn btn-danger shadow-none" id="like-button"><i class="fa fa-heart"></i></button>
                    }
                    else
                    {
                <button class="btn btn-secondary shadow-none" id="like-button"><i class="fa fa-heart"></i></button>
                    }
            </div>
            }
        </div>
        <hr>
        <div class="row mb-3 justify-content-around align-items-center p-3">
            <div class="col-md-4 border-1 rounded-3 m-2 p-2">
                @for (int j = 0; j < Model.optFields[0].Count; j++)
                {<div class="highlite">
                    <p><b>@Model.optFields[0][j]:</b> @Model.Item.DigitFields[j].Digit</p>
                    <hr>
                </div>
                }
            </div>
            <div class="col-md-4 border-1 rounded-3 m-2 p-2">
                @for (int j = 0; j < Model.optFields[2].Count; j++)
                {
                <div class="highlite">
                    <p><b>@Model.optFields[2][j]:</b><br>@Model.Item.WordFields[j].Word</p>
                    <hr>
                </div>
                }
            </div>
            <div class="col-md-4 border-1 rounded-3 m-2 p-2">
                @for (int j = 0; j < Model.optFields[3].Count; j++)
                {
                <div class="highlite">
                    <p><b>@Model.optFields[3][j]:</b> @Model.Item.DateFields[j].Date</p>
                    <hr>
                </div>
                }
            </div>
            <div class="col-md-4 border-1 rounded-3 m-2 p-2">
                @for (int j = 0; j < Model.optFields[4].Count; j++)
                {
                <div class="highlite">
                    <p>
                        <b>
                            @Model.optFields[4][j]:
                        </b>
                        @if (!Model.Item.CheckboxFields[j].Checkbox)
                            {
                        <i class="fa fa-times" style="color:red"></i>
                            }
                            else
                            {
                        <i class="fa fa-check" style="color:green"></i>
                            }
                    </p>
                    <hr>
                </div>
                }
            </div>
            <div class="col-md-8 border-1 rounded-3 m-2 p-2">
                @for (int j = 0; j < Model.optFields[1].Count; j++)
                {
                <div class="highlite">
                    <p><b>@Model.optFields[1][j]:</b></p>
                    <p id="markdown-show-@j">@Model.Item.TextFields[j].Text</p>
                    <hr>
                </div>

                }
            </div>
        </div>
    </div>
    <div class="modal-body m-3 p-3 auth-form">
        <div class="row">
            <h3 class="text-center">Comments</h3>
        </div>

        <div class="col-12 justify-content-start" id="chatroom">
            @foreach (var comment in Model.Item.Comments)
            {
                <div class="row border-comment p-1 m-3">
                    <p class="m-0"><b>@comment.User:</b></p>
                    <hr />
                    <p class="offset-1">@comment.Text</p>
                </div>
            }
        </div>
        @if (ViewBag.Status < 3)
        {
            <div class="row justify-content-start">
                <form method="post" class="row">
                    <div class="row justify-content-start align-items-center">
                        <div class="col-8">
                            <input type="text" class="form-control col-8 m-3" name="message" id="messageField" />
                        </div>
                        <input type="submit" class="btn btn-primary col-2 m-3" style="display:none" value="Send" id="submitForm"/>
                    </div>
                </form>
            </div>
        }
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script src="~/lib/markdown/lib/markdown.js"></script>
<script>
     for (i = 0; i < @Model.optFields[1].Count; i++) {
         document.querySelector(`#markdown-show-${i}`).innerHTML = markdown.toHTML(document.querySelector(`#markdown-show-${i}`).innerHTML)
    }

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/comments")
        .build();
    hubConnection.serverTimeoutInMilliseconds = 1000 * 60 * 10;
    let connectionId = "";
    hubConnection.on('Notify', function (message, userName) {

        let userNameElem = document.createElement("p");
        userNameElem.classList.add("m-0");
        userNameElem.innerHTML = `<b>${userName}:</b>`;
        console.log(message);
        let comment = document.createElement("p");
        comment.classList.add("offset-1");
        comment.innerHTML = `${message}`;
        let elem = document.createElement("div");
        elem.classList.add("row", "border-comment","p-1", "m-3");
        elem.appendChild(userNameElem);
        elem.appendChild(document.createElement("hr"));
        elem.appendChild(comment);
        
        console.log(elem);
        document.getElementById("chatroom").appendChild(elem);
    });
    if (+@ViewBag.Status < 3)
    {
        document.getElementById("messageField").addEventListener('input', function (e) {
            if (document.getElementById("messageField").value) document.getElementById("submitForm").style.display = "flex";
            else document.getElementById("submitForm").style.display = "none";
        })
    document.getElementById("submitForm")
        .addEventListener("click", function (e) {
            e.preventDefault();
            const data = new FormData();
            data.append("message", document.getElementById("messageField").value);
            data.append("itemId", @Model.Item.Id);
            data.append("userName", "@ViewBag.Name");
            fetch("/item/send", {
                method: "POST",
                body: data
            })
                .catch(error => console.error("Error: ", error));
        });
    document.getElementById("like-button")
        .addEventListener("click", function (e) {
            e.preventDefault();
            like = document.getElementById("like-button");
            if (like.classList.contains("btn-danger")) {
                like.classList.remove("btn-danger");
                like.classList.add("btn-secondary");
            }
            else {
                like.classList.remove("btn-secondary");
                like.classList.add("btn-danger");
            }
            const data = new FormData();
            fetch(`/item/like/@Model.Item.Id/@ViewBag.Name`, {
                method: "POST",
                body: data
            })
                .catch(error => console.error("Error: ", error));
        });
    }
    hubConnection.start().then(() => {
        connectionId = hubConnection.connectionId;
        console.log(connectionId)
        const data = new FormData();
        data.append("connectionId", connectionId);
        data.append("itemId", @Model.Item.Id);
        fetch("/item/join", {
            method: "POST",
            body: data
        })
            .catch(error => console.error("Error: ", error));
    });
</script>